const AWS = require('aws-sdk');
const dynamoDB = new AWS.DynamoDB.DocumentClient();

const pageSize = 5; // 페이지당 항목 수

exports.handler = async (event, context) => {
  
  try {
    // 기본적으로 모든 team의 값을 조회
    const getAllItemsWithPagination = async (pageSize, lastEvaluatedKey) => {
        const params = {
          TableName: 'nba-teaminfo',
          Limit: pageSize,
          ExclusiveStartKey: lastEvaluatedKey
        };
      
        const result = await dynamoDB.scan(params).promise();
      
        const items = result.Items.map(item => ({
          id: item.id,
          team: item.teamNAME,
          teamImageUrl: item.team_image_url
        }));
      
        const nextKey = result.LastEvaluatedKey;
      
        return {
          items,
          nextKey
        };
      };
      const pageSize = 10; // 페이지당 항목 수
let lastEvaluatedKey = null; // 이전 페이지의 마지막 평가 키

// 첫 페이지 조회
const firstPage = await getAllItemsWithPagination(pageSize, lastEvaluatedKey);
const firstPageItems = firstPage.items;
const nextKey = firstPage.nextKey;

// 다음 페이지 조회
if (nextKey) {
  lastEvaluatedKey = nextKey;
  const nextPage = await getAllItemsWithPagination(pageSize, lastEvaluatedKey);
  const nextPageItems = nextPage.items;
  // 이어서 처리
}
    // 사용자가 입력한 값으로 필터링하여 결과 반환
    const getFilteredItems = async (team) => {
      const uppercaseTeam = team.toUpperCase(); //입력값 대문자로 변환 
      const params = {
        TableName: 'nba-teaminfo',
        FilterExpression: 'contains(teamNAME, :team)',
        ExpressionAttributeValues: {
          ':team': uppercaseTeam
        } //(쿼리식 안에는 UPPER함수 사용하면 ERROR남)"invalid filterexpression: invalid function name; function: upper"
      };

      const result = await dynamoDB.scan(params).promise();
      return result.Items.map(item => ({
         id: item.id,
         team: item.teamNAME,
         teamImageUrl: item.team_image_url
      }));
    };

    // 사용자가 입력한 team 값
    const team = event.queryStringParameters && event.queryStringParameters.team;

    let items;

    // team 값이 없으면 모든 항목을 조회하여 반환
    if (!team) {
      items = await getAllItemsWithPagination();
    } else {
      // team 값이 존재하면 필터링하여 반환
      items = await getFilteredItems(team);
    }

    return {
      statusCode: 200,
      headers: {
        "Access-Control-Allow-Headers" : "Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token",
        "Access-Control-Allow-Origin": "*",
        "Access-Control-Allow-Methods": "OPTIONS,GET"
      },
      body: JSON.stringify(items)
    };
  } catch (error) {
    return {
      statusCode: 500,
      body: JSON.stringify(error.message)
    };
  }
};
